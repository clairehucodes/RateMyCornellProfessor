{"version":3,"sources":["webpack://ratemycornellprofessor/./src/content.ts","webpack://ratemycornellprofessor/webpack/startup"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["/**\n * Rate My Cornell Professors\n * JavaScript file to scrape information and replace it in Class Roster\n */\n\n//import { restricted } from './restricted';\n//import { subs } from './subs';\n\n\nconst BASE_URL: string = 'http://www.ratemyprofessors.com';\nconst BASE_SEARCH_URL: string = 'http://www.ratemyprofessors.com/search.jsp?queryoption=HEADER&queryBy=teacherName&schoolName=Cornell+University&schoolID=298&query=';\nconst GREEN: string = '#1FB81C';\nconst YELLOW: string = '#FEEB00';\nconst RED: string = '#FC4433';\n// Use the same loading indicator that the page already does; don't host our own\nconst LOADING_INDICATOR: string = '<img src=\"https://i.pinimg.com/originals/a6/8f/b5/a68fb58aa1ace26b0008f5a5dbcebfd2.jpg\">';\n\n// @ts-ignore\nchrome.runtime.sendMessage({ action: 'showIcon' });\n\n// Watch each of the areas where professor names may appear for changes. When detected, rate each professor.\n// const getOverallScoresObserver: MutationObserver = new MutationObserver(rateProfessorsOnPage);\nconst getOverallScoresObserver: MutationObserver = new MutationObserver(rateProfessorsOnPage);\nconsole.log(document.getElementsByClassName('class-listing').item(0));\n//$COURSE_LIST_AREAS.forEach(area => getOverallScoresObserver.observe(area, { childList: true }));\ngetOverallScoresObserver.observe(document.getElementsByClassName('class-listing').item(0), { childList: true, attributes: true});\n\n//rateProfessorsOnPage;\nsetTimeout(rateProfessorsOnPage, 1000);\n\n\n/**\n * Rates each of the professors currently in view.\n */\nfunction rateProfessorsOnPage() {\n  console.log(\"--rateProfessorsOnPage\")\n  const professorArray: Array<string> = getProfessorNodes();\n\n  // Group nodes by professor name. This way, only one API call needs to be made per professor, then that score\n  // is assigned to each of the nodes with that professor\n  \n  // const groupedProfessorNodes = groupProfessors(professorNodes);\n  // Object.keys(groupedProfessorNodes).forEach(async name => {\n  //   try {\n  //     if (isValidProfessor(name) && isUnratedProfessor(name)) {\n  //       groupedProfessorNodes[name].forEach(setIsLoading);\n  //       const score = await getProfessorId(name).then(getOverallScore);\n  //       groupedProfessorNodes[name].forEach(node => setScore(name, node, score));\n  //     } else if (isUnratedProfessor(name)) {\n  //       groupedProfessorNodes[name].forEach(node => setInvalidScore(name, node));\n  //     }\n  //   } catch (err) {\n  //     groupedProfessorNodes[name].forEach(node => setInvalidScore(name, node));\n  //   }\n  // });\n\n\n\nfor (let i:number = 0; i < professorArray.length; i++) {\nlet myNode: HTMLElement = document.getElementsByClassName('instructors').item(i).querySelector('tooltip-iws')\n async name => {\n    try {\n      if (isValidProfessor(name) && isUnratedProfessor(name)) {\n        const score = await getProfessorId(name).then(getOverallScore);\n        setScore(name, myNode, score);\n      } else if (isUnratedProfessor(name)) {\n        setInvalidScore(name, myNode);\n      }\n    } catch (err) {\n      setInvalidScore(name, myNode);\n    }\n  };\n}\n\n    \n\n\n/**\n * Returns an array of nodes of each search result's professor field\n */\nfunction getProfessorNodes(): Array<string> {\n  let returnNodes: Array<string>\n  console.log(document.getElementsByClassName('instructors').length)\n  for (let i: number = 0; i < document.getElementsByClassName('instructors').length; i++) {\n  \n    //let returnVal: HTMLElement = document.getElementsByClassName('instructors').item(i).getElementsByClassName('tooltip-iws').item(i).querySelector('data-content')\n    //var myEle = document.createElement(\"class\");\n    //myEle.id = returnVal;   \n\n    let returnVal: HTMLElement = document.getElementsByClassName('instructors').item(i).querySelector('tooltip-iws')\n    returnNodes[i] = returnVal\n    console.log(returnVal)\n  }\n  return returnNodes;\n}\n\n/**\n * Gets the part of the URL that needs to be appended to the base URL to reach the professor's page\n * Example return: '/ShowRatings.jsp?tid=2301025'\n */\nfunction getProfessorId(profName: string): Promise<string> {\n  const config = {\n    action: 'searchForProfessor',\n    method: 'POST',\n    url: BASE_SEARCH_URL + convertName(profName)\n  };\n\n  return new Promise((resolve, reject) => {\n    // @ts-ignore\n    chrome.runtime.sendMessage(config, res => {\n      if (res.profId) {\n        resolve(res.profId);\n      } else {\n        reject('Search result not found');\n      }\n    });\n  });\n}\n\n/**\n * Scrapes the RMP page for the professor at <profId> for their overall score and returns it\n */\nfunction getOverallScore(profId: string): Promise<number> {\n  const config = {\n    action: 'getOverallScore',\n    method: 'POST',\n    url: BASE_URL + profId,\n  };\n\n  return new Promise((resolve, reject) => {\n    // @ts-ignore\n    chrome.runtime.sendMessage(config, res => {\n      if (res.profRating) {\n        if (res.profRating === '0.0' || res.profRating.includes('Grade received')) {\n          reject('Professor not rated');\n        } else {\n          resolve(parseFloat(res.profRating));\n        }\n      } else {\n        reject('No rating found');\n      }\n    });\n  });\n}\n\n/**\n * Converts a name from it's notation as shown in the search results to a form\n * that can be appended to the base RateMyProfessors URL in order to emulate\n * a search.\n */\nfunction convertName(original: string): string {\n  const regex = /\\w+(, )\\w+/g;\n  const temp: RegExpExecArray = regex.exec(original)!;\n//   if (temp[0].trim() in subs) {\n//     temp[0] = subs[temp[0].trim()];\n//   }\n  return encodeURIComponent(temp[0]);\n}\n\n/**\n * Returns a color based on <rating>. These numbers match the values on RateMyProfessors.com\n */\nfunction getColor(rating: number): string {\n  if (rating >= 3.5) {\n    return GREEN;\n  }\n  if (rating < 2.5) {\n    return RED;\n  }\n  return YELLOW;\n}\n\n/**\n * Given an array of elements, groups them by professor name and returns an object\n * where the key represents the professor name and the value is an array of the nodes\n * that correspond to that professor.\n *\n * Slight modification of https://stackoverflow.com/questions/14446511/what-is-the-most-efficient-method-to-groupby-on-a-javascript-array-of-objects\n */\nfunction groupProfessors(vals: NodeListOf<Element>): { [key: string]: HTMLElement[] } {\n  return Array.from(vals).reduce((ret, val) => {\n    (ret[val.textContent.trim()] = ret[val.textContent.trim()] || []).push(val);\n    return ret;\n  }, {});\n}\n\n/**\n * Returns TRUE if the professor is a single, non-Staff professor. Staff professors and\n * courses with multiple professors return FALSE.\n */\nfunction isValidProfessor(name: string): boolean {\n  return (name !== '' && !name.includes('Staff'));\n}\n\n/**\n * Return TRUE if the professor is not already rated or is in the process of being rated.\n * FALSE otherwise.\n */\nfunction isUnratedProfessor(name: string): boolean {\n  return !name.includes(' - ');\n}\n\n/**\n * Adds 'N/A' as the score to professor on the search page\n */\nfunction setInvalidScore(name: string, node: HTMLElement) {\n  setScore(name, node);\n}\n\n/**\n * Appends the loading indicator next to professor names in the results list\n */\nfunction setIsLoading(name: String) {\n  //name.innerHTML = name.innerHTML + ' - ' + LOADING_INDICATOR;\n  name = name + ' - ' + LOADING_INDICATOR;\n}\n\n/**\n * Adds the score and changes the color of the professor on the search page\n */\nfunction setScore(name: string, node: HTMLElement, score?: number) {\n  if (score) {\n    node.textContent = name + ' - ' + score.toFixed(1);\n    node.style.color = getColor(score);\n  } else {\n    node.textContent = name + ' - N/A';\n  }\n}\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_modules__[\"./src/content.ts\"]();\n"],"sourceRoot":""}
