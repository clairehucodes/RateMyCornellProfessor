/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/content.ts":
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/
/***/ (function() {

eval("\n/**\n * Rate My Cornell Professors\n * JavaScript file to scrape information and replace it in Class Roster\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n//import { restricted } from './restricted';\n//import { subs } from './subs';\nvar BASE_URL = 'http://www.ratemyprofessors.com';\nvar BASE_SEARCH_URL = 'http://www.ratemyprofessors.com/search.jsp?queryoption=HEADER&queryBy=teacherName&schoolName=Cornell+University&schoolID=298&query=';\nvar GREEN = '#1FB81C';\nvar YELLOW = '#FEEB00';\nvar RED = '#FC4433';\n// Use the same loading indicator that the page already does; don't host our own\nvar LOADING_INDICATOR = '<img src=\"https://i.pinimg.com/originals/a6/8f/b5/a68fb58aa1ace26b0008f5a5dbcebfd2.jpg\">';\n// The divs that contain possible locations for professor names to populate\nvar $COURSE_LIST_AREAS = [\n    document.getElementById('class-subject-listing'),\n];\n// @ts-ignore\n//chrome.runtime.sendMessage({ action: 'showIcon' });\n// Watch each of the areas where professor names may appear for changes. When detected, rate each professor.\nvar getOverallScoresObserver = new MutationObserver(rateProfessorsOnPage);\n$COURSE_LIST_AREAS.forEach(function (area) { return getOverallScoresObserver.observe(area, { childList: true }); });\n/**\n * Rates each of the professors currently in view.\n */\nfunction rateProfessorsOnPage() {\n    var _this = this;\n    var professorNodes = getProfessorNodes();\n    // Group nodes by professor name. This way, only one API call needs to be made per professor, then that score\n    // is assigned to each of the nodes with that professor\n    var groupedProfessorNodes = groupProfessors(professorNodes);\n    Object.keys(groupedProfessorNodes).forEach(function (name) { return __awaiter(_this, void 0, void 0, function () {\n        var score_1, err_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 4, , 5]);\n                    if (!(isValidProfessor(name) && isUnratedProfessor(name))) return [3 /*break*/, 2];\n                    groupedProfessorNodes[name].forEach(setIsLoading);\n                    return [4 /*yield*/, getProfessorId(name).then(getOverallScore)];\n                case 1:\n                    score_1 = _a.sent();\n                    groupedProfessorNodes[name].forEach(function (node) { return setScore(name, node, score_1); });\n                    return [3 /*break*/, 3];\n                case 2:\n                    if (isUnratedProfessor(name)) {\n                        groupedProfessorNodes[name].forEach(function (node) { return setInvalidScore(name, node); });\n                    }\n                    _a.label = 3;\n                case 3: return [3 /*break*/, 5];\n                case 4:\n                    err_1 = _a.sent();\n                    groupedProfessorNodes[name].forEach(function (node) { return setInvalidScore(name, node); });\n                    return [3 /*break*/, 5];\n                case 5: return [2 /*return*/];\n            }\n        });\n    }); });\n}\n/**\n * Returns an array of nodes of each search result's professor field\n */\nfunction getProfessorNodes() {\n    var returnVal;\n    returnVal = document.getElementById('tooltip-iws');\n    if (returnVal != null) {\n        returnVal = returnVal.getAttribute('data-content');\n    }\n    return returnVal;\n}\n/**\n * Gets the part of the URL that needs to be appended to the base URL to reach the professor's page\n * Example return: '/ShowRatings.jsp?tid=2301025'\n */\nfunction getProfessorId(profName) {\n    var config = {\n        action: 'searchForProfessor',\n        method: 'POST',\n        url: BASE_SEARCH_URL + convertName(profName)\n    };\n    return new Promise(function (resolve, reject) {\n        // @ts-ignore\n        chrome.runtime.sendMessage(config, function (res) {\n            if (res.profId) {\n                resolve(res.profId);\n            }\n            else {\n                reject('Search result not found');\n            }\n        });\n    });\n}\n/**\n * Scrapes the RMP page for the professor at <profId> for their overall score and returns it\n */\nfunction getOverallScore(profId) {\n    var config = {\n        action: 'getOverallScore',\n        method: 'POST',\n        url: BASE_URL + profId,\n    };\n    return new Promise(function (resolve, reject) {\n        // @ts-ignore\n        chrome.runtime.sendMessage(config, function (res) {\n            if (res.profRating) {\n                if (res.profRating === '0.0' || res.profRating.includes('Grade received')) {\n                    reject('Professor not rated');\n                }\n                else {\n                    resolve(parseFloat(res.profRating));\n                }\n            }\n            else {\n                reject('No rating found');\n            }\n        });\n    });\n}\n/**\n * Converts a name from it's notation as shown in the search results to a form\n * that can be appended to the base RateMyProfessors URL in order to emulate\n * a search.\n */\nfunction convertName(original) {\n    var regex = /\\w+(, )\\w+/g;\n    var temp = regex.exec(original);\n    //   if (temp[0].trim() in subs) {\n    //     temp[0] = subs[temp[0].trim()];\n    //   }\n    return encodeURIComponent(temp[0]);\n}\n/**\n * Returns a color based on <rating>. These numbers match the values on RateMyProfessors.com\n */\nfunction getColor(rating) {\n    if (rating >= 3.5) {\n        return GREEN;\n    }\n    if (rating < 2.5) {\n        return RED;\n    }\n    return YELLOW;\n}\n/**\n * Given an array of elements, groups them by professor name and returns an object\n * where the key represents the professor name and the value is an array of the nodes\n * that correspond to that professor.\n *\n * Slight modification of https://stackoverflow.com/questions/14446511/what-is-the-most-efficient-method-to-groupby-on-a-javascript-array-of-objects\n */\nfunction groupProfessors(vals) {\n    return Array.from(vals).reduce(function (ret, val) {\n        (ret[val.textContent.trim()] = ret[val.textContent.trim()] || []).push(val);\n        return ret;\n    }, {});\n}\n/**\n * Returns TRUE if the professor is a single, non-Staff professor. Staff professors and\n * courses with multiple professors return FALSE.\n */\nfunction isValidProfessor(name) {\n    return (name !== '' && !name.includes('Staff'));\n}\n/**\n * Return TRUE if the professor is not already rated or is in the process of being rated.\n * FALSE otherwise.\n */\nfunction isUnratedProfessor(name) {\n    return !name.includes(' - ');\n}\n/**\n * Adds 'N/A' as the score to professor on the search page\n */\nfunction setInvalidScore(name, node) {\n    setScore(name, node);\n}\n/**\n * Appends the loading indicator next to professor names in the results list\n */\nfunction setIsLoading(node) {\n    node.innerHTML = node.innerHTML + ' - ' + LOADING_INDICATOR;\n}\n/**\n * Adds the score and changes the color of the professor on the search page\n */\nfunction setScore(name, node, score) {\n    if (score) {\n        node.textContent = name + ' - ' + score.toFixed(1);\n        node.style.color = getColor(score);\n    }\n    else {\n        node.textContent = name + ' - N/A';\n    }\n}\n\n\n//# sourceURL=webpack://ratemycornellprofessor/./src/content.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_modules__["./src/content.ts"]();
/******/ })()
;