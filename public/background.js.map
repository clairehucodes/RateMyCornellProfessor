{"version":3,"sources":["webpack://ratemycornellprofessor/./src/background.ts"],"names":[],"mappings":"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","file":"background.js","sourcesContent":["// @ts-ignore\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    const method: string = request.method ? request.method.toUpperCase() : 'GET';\n    const headers: Headers = new Headers();\n    if (method === 'POST') {\n      headers.append('Content-Type', 'application/x-www-form-urlencoded');\n      //res.header(\"Access-Control-Allow-Headers\", \"x-requested-with, x-requested-by\");\n    }\n    const config: RequestInit = {\n      method: method,\n      headers: headers,\n      mode: 'cors',\n      cache: 'default',\n    };\n  \n    switch (request.action) {\n      case 'showIcon':\n        // @ts-ignore\n        chrome.pageAction.show(sender.tab.id);\n        return true;\n  \n      case 'searchForProfessor':\n        fetch(request.url, config)\n          .then(res => res.text()) \n          .then(pageText => {\n            const searchPage: HTMLElement = document.createElement('html');\n            searchPage.innerHTML = pageText;\n            // const profId: HTMLElement = searchPage.querySelector('.listing.PROFESSOR');\n            const profId: any = searchPage.querySelector('.listing.PROFESSOR');\n            const ret = (profId) ?\n              profId.getElementsByTagName('a')[0].getAttribute('href') :\n              profId;\n            console.debug(ret);\n            sendResponse({ profId: ret });\n          })\n\n          .catch(err => {\n            console.debug('[ERROR: searchForProfessor]');\n            console.debug(err);\n            sendResponse();\n            return false;\n          });\n        return true;\n\n      case 'getOverallScore':\n        fetch(request.url)\n          .then(res => res.text())\n          .then(pageText => {\n            const ratingPage: HTMLElement = document.createElement('html');\n            ratingPage.innerHTML = pageText;\n            const profRatingEle: any = ratingPage.getElementsByClassName('RatingValue__Numerator-qw8sqy-2 liyUjw').item(0)\n            //console.log(ratingPage.getElementsByClassName('RatingValue__Numerator'))\n            let profRating: HTMLElement;\n            if (profRatingEle != null) {\n              profRating = profRatingEle.textContent\n              sendResponse({ profRating });\n            }\n            else {\n              console.debug('[ERROR: ratingPage.querySelector(div.grade) is null]');\n              sendResponse();\n            }\n          })\n          .catch(err => {\n            console.debug('[ERROR: getOverallScore]');\n            console.debug(err);\n            sendResponse();\n            return false;\n          })\n        return true;\n    \n      default:\n        console.debug(`Action ${request.action} not recognized`);\n        break;\n    }\n  });"],"sourceRoot":""}